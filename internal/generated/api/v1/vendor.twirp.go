// Code generated by protoc-gen-twirp v5.8.0, DO NOT EDIT.
// source: v1/vendor.proto

package v1

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// =======================
// VendorService Interface
// =======================

type VendorService interface {
	Connect(context.Context, *Secret) (*Vendor, error)

	Disconnect(context.Context, *UID) (*Void, error)
}

// =============================
// VendorService Protobuf Client
// =============================

type vendorServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewVendorServiceProtobufClient creates a Protobuf client that implements the VendorService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewVendorServiceProtobufClient(addr string, client HTTPClient) VendorService {
	prefix := urlBase(addr) + VendorServicePathPrefix
	urls := [2]string{
		prefix + "Connect",
		prefix + "Disconnect",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &vendorServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &vendorServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *vendorServiceProtobufClient) Connect(ctx context.Context, in *Secret) (*Vendor, error) {
	ctx = ctxsetters.WithPackageName(ctx, "octolab.api.tablo.v1")
	ctx = ctxsetters.WithServiceName(ctx, "VendorService")
	ctx = ctxsetters.WithMethodName(ctx, "Connect")
	out := new(Vendor)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorServiceProtobufClient) Disconnect(ctx context.Context, in *UID) (*Void, error) {
	ctx = ctxsetters.WithPackageName(ctx, "octolab.api.tablo.v1")
	ctx = ctxsetters.WithServiceName(ctx, "VendorService")
	ctx = ctxsetters.WithMethodName(ctx, "Disconnect")
	out := new(Void)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =========================
// VendorService JSON Client
// =========================

type vendorServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewVendorServiceJSONClient creates a JSON client that implements the VendorService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewVendorServiceJSONClient(addr string, client HTTPClient) VendorService {
	prefix := urlBase(addr) + VendorServicePathPrefix
	urls := [2]string{
		prefix + "Connect",
		prefix + "Disconnect",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &vendorServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &vendorServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *vendorServiceJSONClient) Connect(ctx context.Context, in *Secret) (*Vendor, error) {
	ctx = ctxsetters.WithPackageName(ctx, "octolab.api.tablo.v1")
	ctx = ctxsetters.WithServiceName(ctx, "VendorService")
	ctx = ctxsetters.WithMethodName(ctx, "Connect")
	out := new(Vendor)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorServiceJSONClient) Disconnect(ctx context.Context, in *UID) (*Void, error) {
	ctx = ctxsetters.WithPackageName(ctx, "octolab.api.tablo.v1")
	ctx = ctxsetters.WithServiceName(ctx, "VendorService")
	ctx = ctxsetters.WithMethodName(ctx, "Disconnect")
	out := new(Void)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ============================
// VendorService Server Handler
// ============================

type vendorServiceServer struct {
	VendorService
	hooks *twirp.ServerHooks
}

func NewVendorServiceServer(svc VendorService, hooks *twirp.ServerHooks) TwirpServer {
	return &vendorServiceServer{
		VendorService: svc,
		hooks:         hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *vendorServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// VendorServicePathPrefix is used for all URL paths on a twirp VendorService server.
// Requests are always: POST VendorServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const VendorServicePathPrefix = "/twirp/octolab.api.tablo.v1.VendorService/"

func (s *vendorServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "octolab.api.tablo.v1")
	ctx = ctxsetters.WithServiceName(ctx, "VendorService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/octolab.api.tablo.v1.VendorService/Connect":
		s.serveConnect(ctx, resp, req)
		return
	case "/twirp/octolab.api.tablo.v1.VendorService/Disconnect":
		s.serveDisconnect(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *vendorServiceServer) serveConnect(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveConnectJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveConnectProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *vendorServiceServer) serveConnectJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Connect")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(Secret)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Vendor
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.VendorService.Connect(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Vendor and nil error while calling Connect. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *vendorServiceServer) serveConnectProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Connect")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(Secret)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Vendor
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.VendorService.Connect(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Vendor and nil error while calling Connect. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *vendorServiceServer) serveDisconnect(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDisconnectJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDisconnectProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *vendorServiceServer) serveDisconnectJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Disconnect")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UID)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Void
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.VendorService.Disconnect(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Void and nil error while calling Disconnect. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *vendorServiceServer) serveDisconnectProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Disconnect")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UID)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Void
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.VendorService.Disconnect(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Void and nil error while calling Disconnect. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *vendorServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *vendorServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *vendorServiceServer) PathPrefix() string {
	return VendorServicePathPrefix
}

var twirpFileDescriptor1 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4b, 0xfb, 0x30,
	0x14, 0xc7, 0x7f, 0xdd, 0x6f, 0xd6, 0xed, 0x81, 0x3a, 0xc2, 0x0e, 0xb3, 0x88, 0x8c, 0x9e, 0x86,
	0x87, 0x48, 0xeb, 0xcd, 0x63, 0xb7, 0xa1, 0x83, 0x81, 0xd2, 0x6e, 0x1e, 0x76, 0x6b, 0xd3, 0x77,
	0x28, 0x5b, 0xf3, 0x4a, 0x96, 0x05, 0xfc, 0x5b, 0xfc, 0x67, 0xa5, 0x69, 0xf5, 0xd4, 0x81, 0xb7,
	0x6f, 0x92, 0x0f, 0x9f, 0xf7, 0x4d, 0x02, 0x37, 0x26, 0x78, 0x34, 0x28, 0x73, 0x52, 0xbc, 0x52,
	0xa4, 0x89, 0x8d, 0x49, 0x68, 0x3a, 0xa4, 0x19, 0x4f, 0xab, 0x82, 0xeb, 0x34, 0x3b, 0x10, 0x37,
	0x81, 0x57, 0x63, 0x82, 0xca, 0x92, 0x64, 0x83, 0xf9, 0x3b, 0x70, 0x13, 0x14, 0x0a, 0x35, 0x1b,
	0xc3, 0x85, 0xa6, 0x3d, 0xca, 0x89, 0x33, 0x75, 0x66, 0xc3, 0xb8, 0x59, 0xb0, 0x67, 0x18, 0x54,
	0x8a, 0x4c, 0x91, 0xa3, 0x9a, 0xf4, 0xa6, 0xce, 0xec, 0x3a, 0xbc, 0xe7, 0x5d, 0x66, 0xfe, 0xde,
	0x52, 0xf1, 0x2f, 0xef, 0xe7, 0xe0, 0x7e, 0xd8, 0x4a, 0x8c, 0x41, 0x5f, 0xa6, 0x25, 0xb6, 0x6a,
	0x9b, 0xeb, 0xbd, 0x1c, 0x8f, 0xc2, 0x5a, 0x87, 0xb1, 0xcd, 0x2c, 0x84, 0xbe, 0xfe, 0xac, 0x70,
	0xf2, 0xff, 0x4f, 0x93, 0x2c, 0xeb, 0x0f, 0xc0, 0x8d, 0x4e, 0x62, 0x8f, 0xba, 0x4e, 0x09, 0x9d,
	0x94, 0xc0, 0x07, 0x1f, 0x06, 0x3f, 0x14, 0x03, 0x70, 0x5f, 0x56, 0x9b, 0xd7, 0x6d, 0x34, 0xfa,
	0x57, 0xe7, 0x4d, 0xbc, 0x5c, 0xaf, 0xdf, 0x46, 0x4e, 0xf8, 0xe5, 0xc0, 0x55, 0x53, 0x2f, 0x41,
	0x65, 0x0a, 0x81, 0x6c, 0x09, 0x97, 0x73, 0x92, 0x12, 0x85, 0x66, 0x77, 0xdd, 0xa3, 0x9b, 0xa7,
	0xf2, 0xce, 0x9c, 0xb6, 0x97, 0x9d, 0x03, 0x2c, 0x8a, 0xa3, 0x68, 0x4d, 0xb7, 0xdd, 0xec, 0x76,
	0xb5, 0xf0, 0xbc, 0x33, 0x1a, 0x2a, 0xf2, 0xa8, 0xbf, 0xeb, 0x99, 0x20, 0x73, 0xed, 0x27, 0x3d,
	0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0x53, 0xf5, 0xc3, 0xbf, 0xde, 0x01, 0x00, 0x00,
}
